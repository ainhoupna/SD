window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "my_project", "modulename": "my_project", "kind": "module", "doc": "<p>My Project: Fashion-MNIST Image Classification</p>\n\n<h2 id=\"fashion-mnist-classifier\">Fashion-MNIST Classifier</h2>\n\n<p>This project implements an image classification model based on the Fashion MNIST dataset, using PyTorch Lightning to structure the code in a modular and scalable way.\nThe dataset is loaded directly from <code>torchvision.datasets</code>. The goal is to train a simple convolutional network that classifies images into 10 different clothing categories.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>To install dependencies and prepare the environment with uv, run the following commands in the terminal:</p>\n\n<ol>\n<li>Download and install dependencies: <code>curl -sSf https://uv.io/install.sh | sh</code></li>\n<li>Initialize the environment: <code>uv init</code></li>\n<li>Sync dependencies and environment: <code>uv sync</code></li>\n</ol>\n\n<h2 id=\"project-structure\">Project Structure</h2>\n\n<pre><code>fashion-mnist-classifier/\n\u251c\u2500\u2500 models/               # Directory for saved models and checkpoints\n\u251c\u2500\u2500 reports/              # Evaluation reports and generated figures\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_project/       # Project source code\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 app.py        # Gradio application\n\u2502       \u251c\u2500\u2500 config.py     # Configurations and parameters\n\u2502       \u251c\u2500\u2500 dataset.py    # Dataset and DataModule\n\u2502       \u251c\u2500\u2500 model.py      # PyTorch Lightning model\n\u2502       \u251c\u2500\u2500 plots.py      # Visualization functions\n\u2502       \u2514\u2500\u2500 train.py      # Main training script\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 LICENSE               # Project license\n\u251c\u2500\u2500 pyproject.toml        # Project metadata and dependencies\n\u2514\u2500\u2500 README.md             # This file\n</code></pre>\n\n<h2 id=\"training-and-evaluation\">Training and Evaluation</h2>\n\n<p>You can run the training and evaluation script using <code>uvx</code>, which executes the project's command-line scripts without needing to install the package in editable mode.</p>\n\n<p>To run the training script:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>uvx<span class=\"w\"> </span>fashion-mnist-classifier\n</code></pre>\n</div>\n\n<p>To run the app:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>uvx<span class=\"w\"> </span>--from<span class=\"w\"> </span>fashion-mnist-classifier<span class=\"w\"> </span>fashion-mnist-app\n</code></pre>\n</div>\n\n<h2 id=\"building-and-publishing-to-pypi\">Building and Publishing to PyPI</h2>\n\n<p>To build and publish the package to PyPI, follow these steps:</p>\n\n<ol>\n<li><p><strong>Install build tools:</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>uv<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>build<span class=\"w\"> </span>twine\n</code></pre>\n</div></li>\n<li><p><strong>Build the package:</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>build\n</code></pre>\n</div></li>\n<li><p><strong>Publish to PyPI:</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>twine<span class=\"w\"> </span>upload<span class=\"w\"> </span>dist/*\n</code></pre>\n</div>\n\n<p>You will be prompted for your PyPI username and password.</p></li>\n</ol>\n\n<h2 id=\"technical-details\">Technical Details</h2>\n\n<ul>\n<li><strong>Dataset</strong>: <code>torchvision.datasets.FashionMNIST</code> with custom transformations.</li>\n<li><strong>Model</strong>: Simple CNN with one convolutional layer, pooling, and fully connected layers.</li>\n<li><strong>Training</strong>: Implemented with PyTorch Lightning to facilitate handling epochs, performance, and metrics.</li>\n<li><strong>Configuration</strong>: Parameters such as batch size, paths, epochs defined in config.py.</li>\n<li><strong>Optimization</strong>: Adam with CrossEntropyLoss.</li>\n</ul>\n\n<h2 id=\"generated-artifacts\">Generated Artifacts</h2>\n\n<p>When you run the training script (<code>src/my_project/train.py</code>) or the Gradio application (<code>src/my_project/app.py</code>), the following directories and files are created or updated:</p>\n\n<ul>\n<li><strong><code>data/</code></strong>:\n<ul>\n<li>Contains the downloaded Fashion-MNIST dataset files (e.g., <code>FashionMNIST/raw/train-images-idx3-ubyte.gz</code>).</li>\n</ul></li>\n<li><strong><code>models/lightning_logs/</code></strong>:\n<ul>\n<li>Stores logs and checkpoints generated by PyTorch Lightning during training. This typically includes:\n<ul>\n<li><code>version_X/checkpoints/</code>: Model checkpoints (e.g., <code>epoch=4-step=2340.ckpt</code>).</li>\n<li><code>version_X/metrics.csv</code>: Training and validation metrics logged by <code>CSVLogger</code>.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>reports/figures/</code></strong>:\n<ul>\n<li>Contains output visualizations from the evaluation step and data exploration. These include:\n<ul>\n<li><code>confusion_matrix.png</code>: Confusion matrix of model predictions on the test set.</li>\n<li><code>per_class_accuracy.png</code>: Bar chart showing accuracy for each class.</li>\n<li><code>misclassified_grid.png</code>: Grid of misclassified sample images from the test set.</li>\n<li><code>calibration_curve.png</code>: Reliability diagram for model calibration.</li>\n<li><code>train_loss_*.png</code>: Plots of training loss over steps/epochs (generated if <code>CSVLogger</code> is used).</li>\n<li><code>val_acc_*.png</code>: Plots of validation accuracy over epochs (generated if <code>CSVLogger</code> is used).</li>\n<li><code>class_distribution.png</code>: Plot showing the distribution of samples per class in the dataset.</li>\n<li><code>class_correlation_dendrogram.png</code>: Dendrogram illustrating class similarity based on mean images.</li>\n</ul></li>\n<li><code>reports/figures/gradio/</code>: A subdirectory specifically for figures generated when using the Gradio application.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"reports-visualizations\">Reports &amp; Visualizations</h2>\n\n<p>The project generates various reports and visualizations to assess model performance and explore the dataset. Details on the specific files and their locations can be found in the Generated Artifacts section.</p>\n\n<p>Key visualizations include:</p>\n\n<ul>\n<li><strong>Confusion matrix</strong>: Shows the performance of the classification model.</li>\n<li><strong>Per-class accuracy</strong>: Illustrates how well the model performs on each individual class.</li>\n<li><strong>Calibration curve</strong>: Assesses the confidence of the model's predictions.</li>\n<li><strong>Misclassified image grids</strong>: Displays examples of images that the model predicted incorrectly.</li>\n<li><strong>Class distribution plots</strong>: Visualizes the balance of classes within the dataset.</li>\n<li><strong>Class similarity dendrograms</strong>: Helps understand relationships between different clothing categories based on their image features.</li>\n<li><strong>Training loss and validation accuracy curves</strong>: Track the model's learning progress over epochs.</li>\n</ul>\n\n<h2 id=\"generating-pdf-report-with-typst\">Generating PDF Report with Typst</h2>\n\n<p>This project uses <a href=\"https://typst.app/\">Typst</a> to generate a PDF report from the model's results and visualizations.</p>\n\n<h3 id=\"installation-2\">Installation</h3>\n\n<p>To compile the report, you first need to install Typst. You can find installation instructions for your operating system on the <a href=\"https://github.com/typst/typst#installation\">official Typst GitHub repository</a>.</p>\n\n<h3 id=\"compiling-the-report\">Compiling the Report</h3>\n\n<p>Once Typst is installed, navigate to the <code>reports</code> directory and compile the <code>main.typ</code> file. This will generate a report file in the same directory, containing a summary of the project, including the generated plots and evaluation metrics.</p>\n\n<h2 id=\"contact\">Contact</h2>\n\n<ul>\n<li>delrey.132148@e.unavarra.es</li>\n<li>goicoechea.128710@e.unavarra.es</li>\n<li>haddad.179806@e.unavarra.es</li>\n</ul>\n"}, {"fullname": "my_project.app", "modulename": "my_project.app", "kind": "module", "doc": "<p>Gradio application for interactive Fashion-MNIST model training and data exploration.</p>\n\n<p>This script launches a web-based interface with two main tabs:</p>\n\n<ol>\n<li><strong>Data Exploration</strong>: Allows users to visualize the Fashion-MNIST dataset.\nUsers can switch between training and test sets, view class distributions,\nsee a class similarity dendrogram, and browse a gallery of sample images\nwith filtering options.</li>\n</ol>\n\n<ol start=\"2\">\n<li><strong>Train &amp; Evaluate</strong>: Provides an interface to train a model with adjustable\nhyperparameters (e.g., batch size, learning rate, epochs). After training,\nit displays evaluation results, including test accuracy, learning curves,\na confusion matrix, and other performance plots.</li>\n</ol>\n"}, {"fullname": "my_project.app.get_df_from_dataset", "modulename": "my_project.app", "qualname": "get_df_from_dataset", "kind": "function", "doc": "<p>Converts a torchvision dataset to a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.app.explore_datamodule", "modulename": "my_project.app", "qualname": "explore_datamodule", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;my_project.dataset.FashionMNISTDataModule object&gt;"}, {"fullname": "my_project.app.train_df", "modulename": "my_project.app", "qualname": "train_df", "kind": "variable", "doc": "<p></p>\n", "default_value": "       pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  ...  pixel778  pixel779  pixel780  pixel781  pixel782  pixel783  label\n0           0       0       0       0       0       0       0  ...         0         0         0         0         0         0      9\n1           0       0       0       0       0       1       0  ...         0         0         0         0         0         0      0\n2           0       0       0       0       0       0       0  ...         0         0         0         0         0         0      0\n3           0       0       0       0       0       0       0  ...         0         0         0         0         0         0      3\n4           0       0       0       0       0       0       0  ...         0         0         0         0         0         0      0\n...       ...     ...     ...     ...     ...     ...     ...  ...       ...       ...       ...       ...       ...       ...    ...\n59995       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      5\n59996       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      1\n59997       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      3\n59998       0       0       0       0       0       0       0  ...         0         1         0         0         0         0      0\n59999       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      5\n\n[60000 rows x 785 columns]"}, {"fullname": "my_project.app.test_df", "modulename": "my_project.app", "qualname": "test_df", "kind": "variable", "doc": "<p></p>\n", "default_value": "      pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  ...  pixel778  pixel779  pixel780  pixel781  pixel782  pixel783  label\n0          0       0       0       0       0       0       0  ...         0         0         0         0         0         0      9\n1          0       0       0       0       0       0       0  ...       174       189        67         0         0         0      2\n2          0       0       0       0       0       0       0  ...         0         0         0         0         0         0      1\n3          0       0       0       0       0       0       0  ...         0         0         0         0         0         0      1\n4          0       0       0       2       0       1       1  ...         0         0         0         0         0         0      6\n...      ...     ...     ...     ...     ...     ...     ...  ...       ...       ...       ...       ...       ...       ...    ...\n9995       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      9\n9996       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      1\n9997       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      8\n9998       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      1\n9999       0       0       0       0       0       0       0  ...         0         0         0         0         0         0      5\n\n[10000 rows x 785 columns]"}, {"fullname": "my_project.app.update_data_exploration", "modulename": "my_project.app", "qualname": "update_data_exploration", "kind": "function", "doc": "<p>Updates the components in the Data Exploration tab based on user selection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_choice</span>, </span><span class=\"param\"><span class=\"n\">class_filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.app.train_and_evaluate", "modulename": "my_project.app", "qualname": "train_and_evaluate", "kind": "function", "doc": "<p>A function to train and evaluate the model with given hyperparameters.\nThis will be connected to the Gradio interface.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">num_filters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">progress</span><span class=\"o\">=&lt;</span><span class=\"n\">gradio</span><span class=\"o\">.</span><span class=\"n\">helpers</span><span class=\"o\">.</span><span class=\"n\">Progress</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.app.main", "modulename": "my_project.app", "qualname": "main", "kind": "function", "doc": "<p>Launch Gradio interface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.config", "modulename": "my_project.config", "kind": "module", "doc": "<p>Configuration constants for the Fashion-MNIST training script.</p>\n\n<p>This file defines global constants for training that are shared across different\nmodules of the project, such as batch size, number of workers, and max epochs.</p>\n\n<p>These parameters are primarily used when running the training script directly\nfrom the terminal (<code>train.py</code>). The Gradio application provides its own UI controls\nfor these settings, so these values are not used when launching the app.</p>\n"}, {"fullname": "my_project.config.BATCH_SIZE", "modulename": "my_project.config", "qualname": "BATCH_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "128"}, {"fullname": "my_project.config.NUM_WORKERS", "modulename": "my_project.config", "qualname": "NUM_WORKERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "my_project.config.MAX_EPOCHS", "modulename": "my_project.config", "qualname": "MAX_EPOCHS", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "my_project.dataset", "modulename": "my_project.dataset", "kind": "module", "doc": "<p>Defines the PyTorch Lightning DataModule for the Fashion-MNIST dataset.</p>\n\n<p>This module is responsible for:</p>\n\n<ul>\n<li>Downloading the Fashion-MNIST dataset.</li>\n<li>Applying necessary transformations (e.g., normalization).</li>\n<li>Splitting the data into training, validation, and test sets.</li>\n<li>Creating and providing DataLoaders for each set.</li>\n</ul>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule", "kind": "class", "doc": "<p>PyTorch Lightning DataModule for the Fashion-MNIST dataset.\nIt handles the downloading, splitting, and loading of the data.</p>\n", "bases": "pytorch_lightning.core.datamodule.LightningDataModule"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.__init__", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.__init__", "kind": "function", "doc": "<p>Args:\n    data_dir (str): Directory where the data will be downloaded/stored.\n    batch_size (int): The batch size for the data loaders.\n    val_split (float): The fraction of the training data to use for validation.\n    num_workers (int): Number of subprocesses to use for data loading.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>,</span><span class=\"param\">\t<span class=\"n\">val_split</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">num_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span>)</span>"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.data_dir", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.batch_size", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.num_workers", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.num_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.val_split", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.val_split", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.transform", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.transform", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.train_dataset", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.train_dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.val_dataset", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.val_dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.test_dataset", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.test_dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.train_val_dataset", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.train_val_dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.prepare_data", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.prepare_data", "kind": "function", "doc": "<p>Downloads the Fashion-MNIST dataset if it's not already present.\nThis method is called only on a single GPU/process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.setup", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.setup", "kind": "function", "doc": "<p>Assigns train/val/test datasets for dataloaders.\nThis method is called on every GPU.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.train_dataloader", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.train_dataloader", "kind": "function", "doc": "<p>An iterable or collection of iterables specifying training samples.</p>\n\n<p>For more information about multiple dataloaders, see this :ref:<code>section &lt;multiple-dataloaders&gt;</code>.</p>\n\n<p>The dataloader you return will not be reloaded unless you set\n:paramref:<code>~pytorch_lightning.trainer.trainer.Trainer.reload_dataloaders_every_n_epochs</code> to\na positive integer.</p>\n\n<p>For data processing use the following pattern:</p>\n\n<pre><code>- download in `prepare_data()`\n- process and split in `setup()`\n</code></pre>\n\n<p>However, the above are only necessary for distributed processing.</p>\n\n<div class=\"alert warning\">\n\n<h6 id=\"do-not-assign-state-in-prepare_data\">do not assign state in prepare_data</h6>\n\n</div>\n\n<ul>\n<li><code>~pytorch_lightning.trainer.trainer.Trainer.fit()</code></li>\n<li><code>prepare_data()</code></li>\n<li><code>setup()</code></li>\n</ul>\n\n<p>Note:\n    Lightning tries to add the correct sampler for distributed and arbitrary hardware.\n    There is no need to set it yourself.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.val_dataloader", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.val_dataloader", "kind": "function", "doc": "<p>An iterable or collection of iterables specifying validation samples.</p>\n\n<p>For more information about multiple dataloaders, see this :ref:<code>section &lt;multiple-dataloaders&gt;</code>.</p>\n\n<p>The dataloader you return will not be reloaded unless you set\n:paramref:<code>~pytorch_lightning.trainer.trainer.Trainer.reload_dataloaders_every_n_epochs</code> to\na positive integer.</p>\n\n<p>It's recommended that all data downloads and preparation happen in <code>prepare_data()</code>.</p>\n\n<ul>\n<li><code>~pytorch_lightning.trainer.trainer.Trainer.fit()</code></li>\n<li><code>~pytorch_lightning.trainer.trainer.Trainer.validate()</code></li>\n<li><code>prepare_data()</code></li>\n<li><code>setup()</code></li>\n</ul>\n\n<p>Note:\n    Lightning tries to add the correct sampler for distributed and arbitrary hardware\n    There is no need to set it yourself.</p>\n\n<p>Note:\n    If you don't need a validation dataset and a <code>validation_step()</code>, you don't need to\n    implement this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.dataset.FashionMNISTDataModule.test_dataloader", "modulename": "my_project.dataset", "qualname": "FashionMNISTDataModule.test_dataloader", "kind": "function", "doc": "<p>An iterable or collection of iterables specifying test samples.</p>\n\n<p>For more information about multiple dataloaders, see this :ref:<code>section &lt;multiple-dataloaders&gt;</code>.</p>\n\n<p>For data processing use the following pattern:</p>\n\n<pre><code>- download in `prepare_data()`\n- process and split in `setup()`\n</code></pre>\n\n<p>However, the above are only necessary for distributed processing.</p>\n\n<div class=\"alert warning\">\n\n<h6 id=\"do-not-assign-state-in-prepare_data\">do not assign state in prepare_data</h6>\n\n</div>\n\n<ul>\n<li><code>~pytorch_lightning.trainer.trainer.Trainer.test()</code></li>\n<li><code>prepare_data()</code></li>\n<li><code>setup()</code></li>\n</ul>\n\n<p>Note:\n    Lightning tries to add the correct sampler for distributed and arbitrary hardware.\n    There is no need to set it yourself.</p>\n\n<p>Note:\n    If you don't need a test dataset and a <code>test_step()</code>, you don't need to implement\n    this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.model", "modulename": "my_project.model", "kind": "module", "doc": "<p>Defines the neural network architecture for the Fashion-MNIST classifier.</p>\n\n<p>This module contains the <code>Net</code> class, a PyTorch LightningModule that\nencapsulates the model's structure (a simple CNN), the forward pass logic,\nand the training, validation, and test steps.</p>\n"}, {"fullname": "my_project.model.Net", "modulename": "my_project.model", "qualname": "Net", "kind": "class", "doc": "<p>Simple convolutional neural network for Fashion-MNIST classification.</p>\n\n<h2 id=\"architecture\">Architecture</h2>\n\n<ul>\n<li>Conv2d(1 \u2192 16, kernel_size=3)</li>\n<li>ReLU</li>\n<li>MaxPool2d(kernel_size=2)</li>\n<li>Flatten</li>\n<li>Linear(16<em>13</em>13 \u2192 32)  # Note: This will be configurable</li>\n<li>ReLU</li>\n<li>Linear(32 \u2192 10)       # Note: This will be configurable</li>\n</ul>\n\n<p>Loss: CrossEntropyLoss</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Net</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">torch.Size([8, 10])</span>\n</code></pre>\n</div>\n", "bases": "pytorch_lightning.core.module.LightningModule"}, {"fullname": "my_project.model.Net.__init__", "modulename": "my_project.model", "qualname": "Net.__init__", "kind": "function", "doc": "<p>Attributes:\n    prepare_data_per_node:\n        If True, each LOCAL_RANK=0 will call prepare data.\n        Otherwise only NODE_RANK=0, LOCAL_RANK=0 will prepare data.\n    allow_zero_length_dataloader_with_multiple_devices:\n        If True, dataloader with zero length within local rank is allowed.\n        Default value is False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_filters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>, </span><span class=\"param\"><span class=\"n\">lr</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span></span>)</span>"}, {"fullname": "my_project.model.Net.num_filters", "modulename": "my_project.model", "qualname": "Net.num_filters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.hidden_size", "modulename": "my_project.model", "qualname": "Net.hidden_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.lr", "modulename": "my_project.model", "qualname": "Net.lr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.conv", "modulename": "my_project.model", "qualname": "Net.conv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.pool", "modulename": "my_project.model", "qualname": "Net.pool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.flat", "modulename": "my_project.model", "qualname": "Net.flat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.fc1", "modulename": "my_project.model", "qualname": "Net.fc1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.fc2", "modulename": "my_project.model", "qualname": "Net.fc2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.loss_fn", "modulename": "my_project.model", "qualname": "Net.loss_fn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "my_project.model.Net.forward", "modulename": "my_project.model", "qualname": "Net.forward", "kind": "function", "doc": "<p>Forward pass of the network.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x : torch.Tensor\n    Input tensor of shape (N, 1, 28, 28).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>torch.Tensor\n    Output logits of shape (N, 10).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.model.Net.training_step", "modulename": "my_project.model", "qualname": "Net.training_step", "kind": "function", "doc": "<p>Training step for a single batch.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>batch : tuple\n    A batch of data (images, labels).\nbatch_idx : int\n    Index of the batch.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>torch.Tensor\n    Training loss.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.model.Net.validation_step", "modulename": "my_project.model", "qualname": "Net.validation_step", "kind": "function", "doc": "<p>Validation step for a single batch.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>batch : tuple\n    A batch of data (images, labels).\nbatch_idx : int\n    Index of the batch.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.model.Net.test_step", "modulename": "my_project.model", "qualname": "Net.test_step", "kind": "function", "doc": "<p>Test step for a single batch.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>batch : tuple\n    A batch of data (images, labels).\nbatch_idx : int\n    Index of the batch.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.model.Net.configure_optimizers", "modulename": "my_project.model", "qualname": "Net.configure_optimizers", "kind": "function", "doc": "<p>Define optimizer for training.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>torch.optim.Optimizer\n    Adam optimizer with default parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots", "modulename": "my_project.plots", "kind": "module", "doc": "<p>Utilities to evaluate a trained model and generate performance visualizations.</p>\n\n<ul>\n<li>evaluate_and_plot(...) : runs eval on a dataloader and saves:\n<ul>\n<li>confusion_matrix.png</li>\n<li>per_class_accuracy.png</li>\n<li>misclassified_grid.png</li>\n</ul></li>\n<li>plot_curves_from_csvlogger(...) : plots curves from Lightning's CSVLogger\n<ul>\n<li>train_loss_[step|epoch].png</li>\n<li>val_acc_epoch.png (if logged during validation)\nOutputs are saved under reports/figures/ by default.</li>\n</ul></li>\n</ul>\n\n<p>This module does NOT modify your model architecture.</p>\n"}, {"fullname": "my_project.plots.FASHION_CLASSES", "modulename": "my_project.plots", "qualname": "FASHION_CLASSES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;T-shirt/top&#x27;, &#x27;Trouser&#x27;, &#x27;Pullover&#x27;, &#x27;Dress&#x27;, &#x27;Coat&#x27;, &#x27;Sandal&#x27;, &#x27;Shirt&#x27;, &#x27;Sneaker&#x27;, &#x27;Bag&#x27;, &#x27;Ankle boot&#x27;]"}, {"fullname": "my_project.plots.evaluate_model", "modulename": "my_project.plots", "qualname": "evaluate_model", "kind": "function", "doc": "<p>Run the model over a dataloader and return predictions.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>model : torch.nn.Module\n    Trained model to evaluate.\ndataloader : torch.utils.data.DataLoader\n    DataLoader for evaluation (test/validation).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tuple\n    (y_true, y_pred, y_prob_max):\n    - y_true (ndarray[int]): Ground-truth labels.\n    - y_pred (ndarray[int]): Predicted labels.\n    - y_prob_max (ndarray[float]): Max softmax confidence per sample.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_confusion_matrix", "modulename": "my_project.plots", "qualname": "plot_confusion_matrix", "kind": "function", "doc": "<p>Plot and save a confusion matrix.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_true : np.ndarray\n    Ground-truth labels.\ny_pred : np.ndarray\n    Predicted labels.\nclass_names : list of str\n    Class names corresponding to label indices.\nout_path : str\n    File path to save the plot.\nnormalize : bool, optional (default=True)\n    If True, normalize counts to percentages.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y_true</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_per_class_accuracy", "modulename": "my_project.plots", "qualname": "plot_per_class_accuracy", "kind": "function", "doc": "<p>Plot and save per-class accuracy.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_true : np.ndarray\n    Ground-truth labels.\ny_pred : np.ndarray\n    Predicted labels.\nclass_names : list of str\n    Class names corresponding to label indices.\nout_path : str\n    File path to save the plot.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y_true</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_misclassified_grid", "modulename": "my_project.plots", "qualname": "plot_misclassified_grid", "kind": "function", "doc": "<p>Plot a grid of misclassified samples.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>model : torch.nn.Module\n    Trained model to evaluate.\ndataloader : torch.utils.data.DataLoader\n    DataLoader for evaluation (test/validation).\nclass_names : list of str\n    Class names corresponding to label indices.\nout_path : str\n    File path to save the plot.\nmax_examples : int, optional (default=16)\n    Maximum number of misclassified samples to show.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">dataloader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">max_examples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">16</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.evaluate_and_plot", "modulename": "my_project.plots", "qualname": "evaluate_and_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">datamodule</span>,</span><span class=\"param\">\t<span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;reports/figures&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_calibration_curve", "modulename": "my_project.plots", "qualname": "plot_calibration_curve", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_prob</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">n_bins</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_curves_from_csvlogger", "modulename": "my_project.plots", "qualname": "plot_curves_from_csvlogger", "kind": "function", "doc": "<p>If you use Lightning's CSVLogger, this parses the <code>metrics.csv</code> file and\nproduces line plots for:</p>\n\n<ul>\n<li>train loss (step/epoch)</li>\n<li>val accuracy (epoch)</li>\n</ul>\n\n<p>Usage in train.py:\n    from pytorch_lightning.loggers import CSVLogger\n    logger = CSVLogger(\"logs\", name=\"fashion\")\n    trainer = pl.Trainer(..., logger=logger)</p>\n\n<p>Then call:\n    plot_curves_from_csvlogger(logger.log_dir)</p>\n\n<p>Args:\n    csv_log_dir: e.g., \"logs/fashion/version_0\"\n    train_loss_keys: possible metric column names for train loss\n    val_acc_keys: possible metric column names for val acc</p>\n\n<p>Returns:\n    list of saved figure paths</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">csv_log_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;reports/figures&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_loss_keys</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">val_acc_keys</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_learning_curves_from_df", "modulename": "my_project.plots", "qualname": "plot_learning_curves_from_df", "kind": "function", "doc": "<p>Parses a metrics DataFrame and produces line plots for train loss and val accuracy.</p>\n\n<p>Args:\n    df (pd.DataFrame): DataFrame with metrics (e.g., from CSVLogger).</p>\n\n<p>Returns:\n    A tuple of (train_loss_figure, val_acc_figure). Figures can be None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_class_distribution", "modulename": "my_project.plots", "qualname": "plot_class_distribution", "kind": "function", "doc": "<p>Plots the distribution of classes in a dataset.</p>\n\n<p>Args:\n    df (pd.DataFrame): DataFrame with a 'label' column.\n    class_names (List[str]): List of class names.\n    out_path (Optional[str], optional): If provided, saves the plot. Defaults to None.</p>\n\n<p>Returns:\n    plt.Figure: The matplotlib figure object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.get_sample_images_for_gallery", "modulename": "my_project.plots", "qualname": "get_sample_images_for_gallery", "kind": "function", "doc": "<p>Gets a list of random sample images and their labels for a Gradio Gallery.</p>\n\n<p>Args:\n    df (pd.DataFrame): DataFrame with image data.\n    class_names (List[str]): List of class names.\n    n_samples (int, optional): Number of samples to retrieve. Defaults to 20.</p>\n\n<p>Returns:\n    List[Tuple[np.ndarray, str]]: A list of tuples, each containing an image and its label.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.plots.plot_class_correlation_dendrogram", "modulename": "my_project.plots", "qualname": "plot_class_correlation_dendrogram", "kind": "function", "doc": "<p>Calculates and plots a dendrogram showing the similarity between the\naverage image of each class.</p>\n\n<p>Args:\n    df (pd.DataFrame): DataFrame with image data and labels.\n    class_names (List[str]): List of class names.\n    out_path (Optional[str], optional): If provided, saves the plot. Defaults to None.</p>\n\n<p>Returns:\n    plt.Figure: The matplotlib figure object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}, {"fullname": "my_project.train", "modulename": "my_project.train", "kind": "module", "doc": "<p>Train and evaluate the Fashion-MNIST model.</p>\n\n<p>This script can be run from the command line to:</p>\n\n<ol>\n<li>Initialize the DataModule and model with default or specified parameters.</li>\n<li>Run the training process for a fixed number of epochs.</li>\n<li>Evaluate the trained model on the test set.</li>\n<li>Save evaluation figures (like confusion matrix) in <code>reports/figures/</code>.</li>\n</ol>\n\n<h2 id=\"generated-artifacts\">Generated Artifacts</h2>\n\n<p>When you run this script, the following directories and files may be created:</p>\n\n<ul>\n<li><p><code>data/</code>:</p>\n\n<ul>\n<li>Contains the downloaded Fashion-MNIST dataset.</li>\n</ul></li>\n<li><p><code>models/lightning_logs/</code>:</p>\n\n<ul>\n<li>Stores logs and checkpoints from PyTorch Lightning during training.</li>\n</ul></li>\n<li><p><code>reports/figures/</code>:</p>\n\n<ul>\n<li>Contains output visualizations from the evaluation step, such as <code>confusion_matrix.png</code>, <code>per_class_accuracy.png</code>, etc.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>Run training from the command line:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">my_project</span><span class=\"o\">.</span><span class=\"n\">train</span>\n</code></pre>\n</div>\n"}, {"fullname": "my_project.train.main", "modulename": "my_project.train", "qualname": "main", "kind": "function", "doc": "<p>Train and evaluate the Fashion-MNIST model.</p>\n\n<p>This script:</p>\n\n<ol>\n<li>Initializes the DataModule and model.</li>\n<li>Runs training for a fixed number of epochs.</li>\n<li>Evaluates on the test set.</li>\n<li>Saves evaluation figures in <code>reports/figures/</code>.</li>\n</ol>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>The main training and evaluation function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_project.train_exp1", "modulename": "my_project.train_exp1", "kind": "module", "doc": "<p>Experimental configuration parameters for a specific training run.</p>\n\n<p>This file is intended to store a set of hyperparameters for a particular\nexperiment (e.g., <code>exp1</code>). It is not currently used by the main training\nscript but serves as an example of how to manage different experimental setups.</p>\n"}, {"fullname": "my_project.train_exp1.EXP_PARAMS", "modulename": "my_project.train_exp1", "qualname": "EXP_PARAMS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;batch_size&#x27;: 64, &#x27;lr&#x27;: 0.001, &#x27;epochs&#x27;: 10}"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();